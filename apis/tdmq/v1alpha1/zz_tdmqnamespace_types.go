/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RetentionPolicyInitParameters struct {

	// the size of message to retain.
	// the size of message to retain.
	SizeInMb *float64 `json:"sizeInMb,omitempty" tf:"size_in_mb,omitempty"`

	// the time of message to retain.
	// the time of message to retain.
	TimeInMinutes *float64 `json:"timeInMinutes,omitempty" tf:"time_in_minutes,omitempty"`
}

type RetentionPolicyObservation struct {

	// the size of message to retain.
	// the size of message to retain.
	SizeInMb *float64 `json:"sizeInMb,omitempty" tf:"size_in_mb,omitempty"`

	// the time of message to retain.
	// the time of message to retain.
	TimeInMinutes *float64 `json:"timeInMinutes,omitempty" tf:"time_in_minutes,omitempty"`
}

type RetentionPolicyParameters struct {

	// the size of message to retain.
	// the size of message to retain.
	// +kubebuilder:validation:Optional
	SizeInMb *float64 `json:"sizeInMb,omitempty" tf:"size_in_mb,omitempty"`

	// the time of message to retain.
	// the time of message to retain.
	// +kubebuilder:validation:Optional
	TimeInMinutes *float64 `json:"timeInMinutes,omitempty" tf:"time_in_minutes,omitempty"`
}

type TdmqNamespaceInitParameters struct {

	// The Dedicated Cluster Id.
	// The Dedicated Cluster Id.
	// +crossplane:generate:reference:type=Instance
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Instance to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// The name of namespace to be created.
	// The name of namespace to be created.
	EnvironName *string `json:"environName,omitempty" tf:"environ_name,omitempty"`

	// The expiration time of unconsumed message.
	// The expiration time of unconsumed message.
	MsgTTL *float64 `json:"msgTtl,omitempty" tf:"msg_ttl,omitempty"`

	// Description of the namespace.
	// Description of the namespace.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// The Policy of message to retain. Format like: {time_in_minutes: Int, size_in_mb: Int}. time_in_minutes: the time of message to retain; size_in_mb: the size of message to retain.
	// The Policy of message to retain. Format like: `{time_in_minutes: Int, size_in_mb: Int}`. `time_in_minutes`: the time of message to retain; `size_in_mb`: the size of message to retain.
	RetentionPolicy []RetentionPolicyInitParameters `json:"retentionPolicy,omitempty" tf:"retention_policy,omitempty"`
}

type TdmqNamespaceObservation struct {

	// The Dedicated Cluster Id.
	// The Dedicated Cluster Id.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The name of namespace to be created.
	// The name of namespace to be created.
	EnvironName *string `json:"environName,omitempty" tf:"environ_name,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The expiration time of unconsumed message.
	// The expiration time of unconsumed message.
	MsgTTL *float64 `json:"msgTtl,omitempty" tf:"msg_ttl,omitempty"`

	// Description of the namespace.
	// Description of the namespace.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// The Policy of message to retain. Format like: {time_in_minutes: Int, size_in_mb: Int}. time_in_minutes: the time of message to retain; size_in_mb: the size of message to retain.
	// The Policy of message to retain. Format like: `{time_in_minutes: Int, size_in_mb: Int}`. `time_in_minutes`: the time of message to retain; `size_in_mb`: the size of message to retain.
	RetentionPolicy []RetentionPolicyObservation `json:"retentionPolicy,omitempty" tf:"retention_policy,omitempty"`
}

type TdmqNamespaceParameters struct {

	// The Dedicated Cluster Id.
	// The Dedicated Cluster Id.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Instance to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// The name of namespace to be created.
	// The name of namespace to be created.
	// +kubebuilder:validation:Optional
	EnvironName *string `json:"environName,omitempty" tf:"environ_name,omitempty"`

	// The expiration time of unconsumed message.
	// The expiration time of unconsumed message.
	// +kubebuilder:validation:Optional
	MsgTTL *float64 `json:"msgTtl,omitempty" tf:"msg_ttl,omitempty"`

	// Description of the namespace.
	// Description of the namespace.
	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// The Policy of message to retain. Format like: {time_in_minutes: Int, size_in_mb: Int}. time_in_minutes: the time of message to retain; size_in_mb: the size of message to retain.
	// The Policy of message to retain. Format like: `{time_in_minutes: Int, size_in_mb: Int}`. `time_in_minutes`: the time of message to retain; `size_in_mb`: the size of message to retain.
	// +kubebuilder:validation:Optional
	RetentionPolicy []RetentionPolicyParameters `json:"retentionPolicy,omitempty" tf:"retention_policy,omitempty"`
}

// TdmqNamespaceSpec defines the desired state of TdmqNamespace
type TdmqNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TdmqNamespaceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TdmqNamespaceInitParameters `json:"initProvider,omitempty"`
}

// TdmqNamespaceStatus defines the observed state of TdmqNamespace.
type TdmqNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TdmqNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TdmqNamespace is the Schema for the TdmqNamespaces API. Provide a resource to create a TDMQ namespace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type TdmqNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environName) || (has(self.initProvider) && has(self.initProvider.environName))",message="spec.forProvider.environName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.msgTtl) || (has(self.initProvider) && has(self.initProvider.msgTtl))",message="spec.forProvider.msgTtl is a required parameter"
	Spec   TdmqNamespaceSpec   `json:"spec"`
	Status TdmqNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TdmqNamespaceList contains a list of TdmqNamespaces
type TdmqNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TdmqNamespace `json:"items"`
}

// Repository type metadata.
var (
	TdmqNamespace_Kind             = "TdmqNamespace"
	TdmqNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TdmqNamespace_Kind}.String()
	TdmqNamespace_KindAPIVersion   = TdmqNamespace_Kind + "." + CRDGroupVersion.String()
	TdmqNamespace_GroupVersionKind = CRDGroupVersion.WithKind(TdmqNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&TdmqNamespace{}, &TdmqNamespaceList{})
}
