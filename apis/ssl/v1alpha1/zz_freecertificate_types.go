/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DvAuthsInitParameters struct {
}

type DvAuthsObservation struct {

	// DV authentication key.
	DvAuthKey *string `json:"dvAuthKey,omitempty" tf:"dv_auth_key,omitempty"`

	// DV authentication value.
	DvAuthValue *string `json:"dvAuthValue,omitempty" tf:"dv_auth_value,omitempty"`

	// DV authentication type.
	DvAuthVerifyType *string `json:"dvAuthVerifyType,omitempty" tf:"dv_auth_verify_type,omitempty"`
}

type DvAuthsParameters struct {
}

type FreeCertificateInitParameters struct {

	// Specify alias for remark.
	// Specify alias for remark.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Email address.
	// Email address.
	ContactEmail *string `json:"contactEmail,omitempty" tf:"contact_email,omitempty"`

	// Phone number.
	// Phone number.
	ContactPhone *string `json:"contactPhone,omitempty" tf:"contact_phone,omitempty"`

	// Specify CSR encrypt algorithm, only support RSA for now.
	// Specify CSR encrypt algorithm, only support `RSA` for now.
	CsrEncryptAlgo *string `json:"csrEncryptAlgo,omitempty" tf:"csr_encrypt_algo,omitempty"`

	// Specify CSR key parameter, only support "2048" for now.
	// Specify CSR key parameter, only support `"2048"` for now.
	CsrKeyParameter *string `json:"csrKeyParameter,omitempty" tf:"csr_key_parameter,omitempty"`

	// Specify domain name.
	// Specify domain name.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Specify DV authorize method. Available values: DNS_AUTO - automatic DNS auth, DNS - manual DNS auth, FILE - auth by file.
	// Specify DV authorize method. Available values: `DNS_AUTO` - automatic DNS auth, `DNS` - manual DNS auth, `FILE` - auth by file.
	DvAuthMethod *string `json:"dvAuthMethod,omitempty" tf:"dv_auth_method,omitempty"`

	// Specify old certificate ID, used for re-apply.
	// Specify old certificate ID, used for re-apply.
	OldCertificateID *string `json:"oldCertificateId,omitempty" tf:"old_certificate_id,omitempty"`

	// Type of package. Only support "83" (TrustAsia TLS RSA CA).
	// Type of package. Only support `"83"` (TrustAsia TLS RSA CA).
	PackageType *string `json:"packageType,omitempty" tf:"package_type,omitempty"`

	// ID of projects which this certification belong to.
	// ID of projects which this certification belong to.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specify validity period in month, only support "3" months for now.
	// Specify validity period in month, only support `"3"` months for now.
	ValidityPeriod *string `json:"validityPeriod,omitempty" tf:"validity_period,omitempty"`
}

type FreeCertificateObservation struct {

	// Specify alias for remark.
	// Specify alias for remark.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Certificate begin time.
	// Certificate begin time.
	CertBeginTime *string `json:"certBeginTime,omitempty" tf:"cert_begin_time,omitempty"`

	// Certificate end time.
	// Certificate end time.
	CertEndTime *string `json:"certEndTime,omitempty" tf:"cert_end_time,omitempty"`

	// Certificate private key.
	// Certificate private key.
	CertificatePrivateKey *string `json:"certificatePrivateKey,omitempty" tf:"certificate_private_key,omitempty"`

	// Certificate public key.
	// Certificate public key.
	CertificatePublicKey *string `json:"certificatePublicKey,omitempty" tf:"certificate_public_key,omitempty"`

	// Email address.
	// Email address.
	ContactEmail *string `json:"contactEmail,omitempty" tf:"contact_email,omitempty"`

	// Phone number.
	// Phone number.
	ContactPhone *string `json:"contactPhone,omitempty" tf:"contact_phone,omitempty"`

	// Specify CSR encrypt algorithm, only support RSA for now.
	// Specify CSR encrypt algorithm, only support `RSA` for now.
	CsrEncryptAlgo *string `json:"csrEncryptAlgo,omitempty" tf:"csr_encrypt_algo,omitempty"`

	// Specify CSR key parameter, only support "2048" for now.
	// Specify CSR key parameter, only support `"2048"` for now.
	CsrKeyParameter *string `json:"csrKeyParameter,omitempty" tf:"csr_key_parameter,omitempty"`

	// Indicates whether the certificate deployable.
	// Indicates whether the certificate deployable.
	Deployable *bool `json:"deployable,omitempty" tf:"deployable,omitempty"`

	// Specify domain name.
	// Specify domain name.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Specify DV authorize method. Available values: DNS_AUTO - automatic DNS auth, DNS - manual DNS auth, FILE - auth by file.
	// Specify DV authorize method. Available values: `DNS_AUTO` - automatic DNS auth, `DNS` - manual DNS auth, `FILE` - auth by file.
	DvAuthMethod *string `json:"dvAuthMethod,omitempty" tf:"dv_auth_method,omitempty"`

	// DV certification information.
	// DV certification information.
	DvAuths []DvAuthsObservation `json:"dvAuths,omitempty" tf:"dv_auths,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Certificate insert time.
	// Certificate insert time.
	InsertTime *string `json:"insertTime,omitempty" tf:"insert_time,omitempty"`

	// Specify old certificate ID, used for re-apply.
	// Specify old certificate ID, used for re-apply.
	OldCertificateID *string `json:"oldCertificateId,omitempty" tf:"old_certificate_id,omitempty"`

	// Type of package. Only support "83" (TrustAsia TLS RSA CA).
	// Type of package. Only support `"83"` (TrustAsia TLS RSA CA).
	PackageType *string `json:"packageType,omitempty" tf:"package_type,omitempty"`

	// Product zh name.
	// Product zh name.
	ProductZhName *string `json:"productZhName,omitempty" tf:"product_zh_name,omitempty"`

	// ID of projects which this certification belong to.
	// ID of projects which this certification belong to.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Indicates whether the certificate renewable.
	// Indicates whether the certificate renewable.
	Renewable *bool `json:"renewable,omitempty" tf:"renewable,omitempty"`

	// Certificate status. 0 = Approving, 1 = Approved, 2 = Approve failed, 3 = expired, 4 = DNS record added, 5 = OV/EV Certificate and confirm letter needed, 6 = Order canceling, 7 = Order canceled, 8 = Submitted and confirm letter needed, 9 = Revoking, 10 = Revoked, 11 = re-applying, 12 = Revoke and confirm letter needed, 13 = Free SSL and confirm letter needed.
	// Certificate status. 0 = Approving, 1 = Approved, 2 = Approve failed, 3 = expired, 4 = DNS record added, 5 = OV/EV Certificate and confirm letter needed, 6 = Order canceling, 7 = Order canceled, 8 = Submitted and confirm letter needed, 9 = Revoking, 10 = Revoked, 11 = re-applying, 12 = Revoke and confirm letter needed, 13 = Free SSL and confirm letter needed.
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Certificate status message.
	// Certificate status message.
	StatusMsg *string `json:"statusMsg,omitempty" tf:"status_msg,omitempty"`

	// Certificate status name.
	// Certificate status name.
	StatusName *string `json:"statusName,omitempty" tf:"status_name,omitempty"`

	// Specify validity period in month, only support "3" months for now.
	// Specify validity period in month, only support `"3"` months for now.
	ValidityPeriod *string `json:"validityPeriod,omitempty" tf:"validity_period,omitempty"`

	// Vulnerability status.
	// Vulnerability status.
	VulnerabilityStatus *string `json:"vulnerabilityStatus,omitempty" tf:"vulnerability_status,omitempty"`
}

type FreeCertificateParameters struct {

	// Specify alias for remark.
	// Specify alias for remark.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Email address.
	// Email address.
	// +kubebuilder:validation:Optional
	ContactEmail *string `json:"contactEmail,omitempty" tf:"contact_email,omitempty"`

	// Phone number.
	// Phone number.
	// +kubebuilder:validation:Optional
	ContactPhone *string `json:"contactPhone,omitempty" tf:"contact_phone,omitempty"`

	// Specify CSR encrypt algorithm, only support RSA for now.
	// Specify CSR encrypt algorithm, only support `RSA` for now.
	// +kubebuilder:validation:Optional
	CsrEncryptAlgo *string `json:"csrEncryptAlgo,omitempty" tf:"csr_encrypt_algo,omitempty"`

	// Specify CSR key parameter, only support "2048" for now.
	// Specify CSR key parameter, only support `"2048"` for now.
	// +kubebuilder:validation:Optional
	CsrKeyParameter *string `json:"csrKeyParameter,omitempty" tf:"csr_key_parameter,omitempty"`

	// Specify CSR key password.
	// Specify CSR key password.
	// +kubebuilder:validation:Optional
	CsrKeyPasswordSecretRef *v1.SecretKeySelector `json:"csrKeyPasswordSecretRef,omitempty" tf:"-"`

	// Specify domain name.
	// Specify domain name.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Specify DV authorize method. Available values: DNS_AUTO - automatic DNS auth, DNS - manual DNS auth, FILE - auth by file.
	// Specify DV authorize method. Available values: `DNS_AUTO` - automatic DNS auth, `DNS` - manual DNS auth, `FILE` - auth by file.
	// +kubebuilder:validation:Optional
	DvAuthMethod *string `json:"dvAuthMethod,omitempty" tf:"dv_auth_method,omitempty"`

	// Specify old certificate ID, used for re-apply.
	// Specify old certificate ID, used for re-apply.
	// +kubebuilder:validation:Optional
	OldCertificateID *string `json:"oldCertificateId,omitempty" tf:"old_certificate_id,omitempty"`

	// Type of package. Only support "83" (TrustAsia TLS RSA CA).
	// Type of package. Only support `"83"` (TrustAsia TLS RSA CA).
	// +kubebuilder:validation:Optional
	PackageType *string `json:"packageType,omitempty" tf:"package_type,omitempty"`

	// ID of projects which this certification belong to.
	// ID of projects which this certification belong to.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specify validity period in month, only support "3" months for now.
	// Specify validity period in month, only support `"3"` months for now.
	// +kubebuilder:validation:Optional
	ValidityPeriod *string `json:"validityPeriod,omitempty" tf:"validity_period,omitempty"`
}

// FreeCertificateSpec defines the desired state of FreeCertificate
type FreeCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FreeCertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FreeCertificateInitParameters `json:"initProvider,omitempty"`
}

// FreeCertificateStatus defines the observed state of FreeCertificate.
type FreeCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FreeCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// FreeCertificate is the Schema for the FreeCertificates API. Provide a resource to create a Free Certificate.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type FreeCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dvAuthMethod) || (has(self.initProvider) && has(self.initProvider.dvAuthMethod))",message="spec.forProvider.dvAuthMethod is a required parameter"
	Spec   FreeCertificateSpec   `json:"spec"`
	Status FreeCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FreeCertificateList contains a list of FreeCertificates
type FreeCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FreeCertificate `json:"items"`
}

// Repository type metadata.
var (
	FreeCertificate_Kind             = "FreeCertificate"
	FreeCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FreeCertificate_Kind}.String()
	FreeCertificate_KindAPIVersion   = FreeCertificate_Kind + "." + CRDGroupVersion.String()
	FreeCertificate_GroupVersionKind = CRDGroupVersion.WithKind(FreeCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&FreeCertificate{}, &FreeCertificateList{})
}
